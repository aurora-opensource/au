# Copyright 2022 Aurora Operations, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")

################################################################################
# Public libraries and tests

cc_library(
    name = "au",
    hdrs = ["code/au/au.hh"],
    includes = ["code"],
    visibility = ["//visibility:public"],
    deps = [
        ":chrono_interop",
        ":constant",
        ":constants",
        ":math",
        ":units",
    ],
)

cc_test(
    name = "au_test",
    size = "small",
    srcs = ["code/au/au_test.cc"],
    deps = [
        ":au",
        ":testing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "constants",
    hdrs = glob(["code/au/constants/*.hh"]),
    includes = ["code"],
    visibility = ["//visibility:public"],
    deps = [
        ":constant",
        ":units",
    ],
)

cc_test(
    name = "constants_test",
    size = "small",
    srcs = glob(["code/au/constants/test/*.cc"]),
    deps = [
        ":constants",
        ":testing",
        ":units",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "cpp20_test",
    size = "small",
    srcs = ["code/au/cpp20_test.cc"],
    tags = ["manual"],
    deps = [
        ":quantity",
        ":quantity_point",
        ":testing",
        ":units",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "fwd",
    hdrs = ["code/au/fwd.hh"],
    includes = ["code"],
    visibility = ["//visibility:public"],
)

cc_test(
    name = "fwd_test",
    size = "small",
    srcs = [
        "code/au/fwd_test.cc",
        "code/au/fwd_test_lib.cc",
        "code/au/fwd_test_lib.hh",
    ],
    deps = [
        ":fwd",
        ":io",
        ":quantity",
        ":units",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "io",
    hdrs = ["code/au/io.hh"],
    includes = ["code"],
    visibility = ["//visibility:public"],
    deps = [
        ":constant",
        ":magnitude",
        ":quantity",
        ":quantity_point",
        ":unit_symbol",
        ":zero",
    ],
)

cc_test(
    name = "io_test",
    size = "small",
    srcs = ["code/au/io_test.cc"],
    deps = [
        ":constants",
        ":io",
        ":prefix",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "testing",
    testonly = True,
    hdrs = ["code/au/testing.hh"],
    includes = ["code"],
    visibility = ["//visibility:public"],
    deps = [
        ":io",
        ":stdx",
        ":unit_of_measure",
        "@com_google_googletest//:gtest",
    ],
)

cc_test(
    name = "testing_test",
    size = "small",
    srcs = ["code/au/testing_test.cc"],
    deps = [
        ":testing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "units",
    hdrs = glob(["code/au/units/*.hh"]),
    includes = ["code"],
    visibility = ["//visibility:public"],
    deps = [
        ":prefix",
        ":quantity",
        ":quantity_point",
        ":unit_of_measure",
        ":unit_symbol",
    ],
)

cc_test(
    name = "units_test",
    size = "small",
    srcs = glob(["code/au/units/test/*.cc"]),
    deps = [
        ":testing",
        ":units",
        "@com_google_googletest//:gtest_main",
    ],
)

################################################################################
# Implementation detail libraries and tests

cc_library(
    name = "apply_magnitude",
    hdrs = ["code/au/apply_magnitude.hh"],
    includes = ["code"],
    deps = [
        ":apply_rational_magnitude_to_integral",
        ":magnitude",
    ],
)

cc_test(
    name = "apply_magnitude_test",
    size = "small",
    srcs = ["code/au/apply_magnitude_test.cc"],
    deps = [
        ":apply_magnitude",
        ":testing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "apply_rational_magnitude_to_integral",
    hdrs = ["code/au/apply_rational_magnitude_to_integral.hh"],
    includes = ["code"],
    deps = [":magnitude"],
)

cc_test(
    name = "apply_rational_magnitude_to_integral_test",
    size = "small",
    srcs = ["code/au/apply_rational_magnitude_to_integral_test.cc"],
    deps = [
        ":apply_rational_magnitude_to_integral",
        ":testing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "chrono_interop",
    hdrs = ["code/au/chrono_interop.hh"],
    includes = ["code"],
    deps = [
        ":prefix",
        ":quantity",
        ":units",
    ],
)

cc_test(
    name = "chrono_interop_test",
    size = "small",
    srcs = ["code/au/chrono_interop_test.cc"],
    deps = [
        ":chrono_interop",
        ":prefix",
        ":testing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "chrono_policy_validation",
    testonly = True,
    hdrs = ["code/au/chrono_policy_validation.hh"],
    includes = ["code"],
    deps = [
        ":dimension",
        ":quantity",
        ":stdx",
        ":unit_of_measure",
        "@com_google_googletest//:gtest",
    ],
)

cc_test(
    name = "chrono_policy_validation_test",
    size = "small",
    srcs = ["code/au/chrono_policy_validation_test.cc"],
    deps = [
        ":chrono_policy_validation",
        ":prefix",
        ":testing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "constant",
    hdrs = ["code/au/constant.hh"],
    includes = ["code"],
    deps = [
        ":fwd",
        ":quantity",
        ":unit_of_measure",
        ":wrapper_operations",
    ],
)

cc_test(
    name = "constant_test",
    size = "small",
    srcs = ["code/au/constant_test.cc"],
    deps = [
        ":chrono_interop",
        ":constant",
        ":testing",
        ":units",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "conversion_policy",
    hdrs = ["code/au/conversion_policy.hh"],
    includes = ["code"],
    deps = [
        ":magnitude",
        ":stdx",
        ":unit_of_measure",
    ],
)

cc_test(
    name = "conversion_policy_test",
    size = "small",
    srcs = ["code/au/conversion_policy_test.cc"],
    deps = [
        ":conversion_policy",
        ":unit_of_measure",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "dimension",
    hdrs = ["code/au/dimension.hh"],
    includes = ["code"],
    deps = [
        ":fwd",
        ":packs",
        ":power_aliases",
    ],
)

cc_test(
    name = "dimension_test",
    size = "small",
    srcs = ["code/au/dimension_test.cc"],
    deps = [
        ":dimension",
        ":testing",
        ":units",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "magnitude",
    hdrs = ["code/au/magnitude.hh"],
    includes = ["code"],
    deps = [
        ":fwd",
        ":packs",
        ":power_aliases",
        ":stdx",
        ":utility",
        ":zero",
    ],
)

cc_test(
    name = "magnitude_test",
    size = "small",
    srcs = ["code/au/magnitude_test.cc"],
    deps = [
        ":magnitude",
        ":testing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "math",
    hdrs = ["code/au/math.hh"],
    includes = ["code"],
    deps = [
        ":constant",
        ":quantity",
        ":quantity_point",
        ":units",
    ],
)

cc_test(
    name = "math_test",
    size = "small",
    srcs = ["code/au/math_test.cc"],
    deps = [
        ":math",
        ":testing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "no_wconversion_test",
    size = "small",
    srcs = ["code/au/no_wconversion_test.cc"],
    tags = ["no_wconversion"],
    deps = [
        ":quantity",
        ":testing",
        ":units",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "operators",
    hdrs = ["code/au/operators.hh"],
    includes = ["code"],
)

cc_test(
    name = "operators_test",
    size = "small",
    srcs = ["code/au/operators_test.cc"],
    deps = [
        ":operators",
        ":testing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "packs",
    hdrs = ["code/au/packs.hh"],
    includes = ["code"],
    deps = [
        ":fwd",
        ":stdx",
        ":utility",
    ],
)

cc_test(
    name = "packs_test",
    size = "small",
    srcs = ["code/au/packs_test.cc"],
    deps = [
        ":packs",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "power_aliases",
    hdrs = ["code/au/power_aliases.hh"],
    includes = ["code"],
)

cc_test(
    name = "power_aliases_test",
    size = "small",
    srcs = ["code/au/power_aliases_test.cc"],
    deps = [
        ":packs",
        ":power_aliases",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "prefix",
    hdrs = ["code/au/prefix.hh"],
    includes = ["code"],
    deps = [
        ":fwd",
        ":quantity",
        ":quantity_point",
        ":unit_of_measure",
        ":unit_symbol",
    ],
)

cc_test(
    name = "prefix_test",
    size = "small",
    srcs = ["code/au/prefix_test.cc"],
    deps = [
        ":prefix",
        ":testing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "quantity",
    hdrs = ["code/au/quantity.hh"],
    includes = ["code"],
    deps = [
        ":apply_magnitude",
        ":conversion_policy",
        ":fwd",
        ":operators",
        ":rep",
        ":static_cast_checkers",
        ":unit_of_measure",
        ":utility",
        ":zero",
    ],
)

cc_test(
    name = "quantity_test",
    size = "small",
    srcs = [
        "code/au/quantity_chrono_policy_correspondence_test.cc",
        "code/au/quantity_test.cc",
    ],
    deps = [
        ":chrono_policy_validation",
        ":prefix",
        ":quantity",
        ":testing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "quantity_point",
    hdrs = ["code/au/quantity_point.hh"],
    includes = ["code"],
    deps = [
        ":fwd",
        ":quantity",
        ":stdx",
        ":utility",
    ],
)

cc_test(
    name = "quantity_point_test",
    size = "small",
    srcs = ["code/au/quantity_point_test.cc"],
    deps = [
        ":prefix",
        ":quantity_point",
        ":testing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "rep",
    hdrs = ["code/au/rep.hh"],
    includes = ["code"],
    deps = [
        ":fwd",
        ":stdx",
    ],
)

cc_test(
    name = "rep_test",
    size = "small",
    srcs = ["code/au/rep_test.cc"],
    deps = [
        ":chrono_interop",
        ":constant",
        ":magnitude",
        ":prefix",
        ":quantity",
        ":quantity_point",
        ":rep",
        ":unit_symbol",
        ":units",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "static_cast_checkers",
    hdrs = ["code/au/static_cast_checkers.hh"],
    includes = ["code"],
)

cc_test(
    name = "static_cast_checkers_test",
    size = "small",
    srcs = ["code/au/static_cast_checkers_test.cc"],
    deps = [
        ":static_cast_checkers",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "stdx",
    srcs = glob([
        "code/au/stdx/*.cc",
        "code/au/stdx/experimental/*.cc",
    ]),
    hdrs = glob([
        "code/au/stdx/*.hh",
        "code/au/stdx/experimental/*.hh",
    ]),
    includes = ["code"],
)

cc_test(
    name = "stdx_test",
    size = "small",
    srcs = glob(["code/au/stdx/test/*.cc"]),
    deps = [
        ":stdx",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "unit_of_measure",
    hdrs = ["code/au/unit_of_measure.hh"],
    includes = ["code"],
    deps = [
        ":dimension",
        ":magnitude",
        ":power_aliases",
        ":stdx",
        ":utility",
        ":zero",
    ],
)

cc_test(
    name = "unit_of_measure_test",
    size = "small",
    srcs = ["code/au/unit_of_measure_test.cc"],
    deps = [
        ":prefix",
        ":testing",
        ":unit_of_measure",
        ":units",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "unit_symbol",
    hdrs = ["code/au/unit_symbol.hh"],
    includes = ["code"],
    deps = [
        ":fwd",
        ":wrapper_operations",
    ],
)

cc_test(
    name = "unit_symbol_test",
    size = "small",
    srcs = ["code/au/unit_symbol_test.cc"],
    deps = [
        ":testing",
        ":unit_symbol",
        ":units",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "utility",
    hdrs = glob(["code/au/utility/*.hh"]),
    includes = ["code"],
    deps = [":stdx"],
)

cc_test(
    name = "utility_test",
    size = "small",
    srcs = glob(["code/au/utility/test/*.cc"]),
    deps = [
        ":testing",
        ":utility",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "wrapper_operations",
    hdrs = ["code/au/wrapper_operations.hh"],
    includes = ["code"],
    deps = [
        ":quantity",
        ":stdx",
    ],
)

cc_test(
    name = "wrapper_operations_test",
    size = "small",
    srcs = ["code/au/wrapper_operations_test.cc"],
    deps = [
        ":testing",
        ":units",
        ":wrapper_operations",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "zero",
    hdrs = ["code/au/zero.hh"],
    includes = ["code"],
    deps = [":fwd"],
)

cc_test(
    name = "zero_test",
    size = "small",
    srcs = ["code/au/zero_test.cc"],
    deps = [
        ":zero",
        "@com_google_googletest//:gtest_main",
    ],
)

################################################################################
# Filegroups for the single-file tool

filegroup(
    name = "headers",
    srcs = glob(["code/au/**/*.hh"]),
    visibility = ["//:__pkg__"],
)

################################################################################
# Examples of error conditions that can occur.

cc_library(
    name = "error_examples",
    srcs = ["error_examples.cc"],
    tags = ["manual"],
    deps = ["//au"],
)
